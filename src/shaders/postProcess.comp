#version 460 core

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform readonly image2D currentFrame;
layout(rgba16f, binding = 1) uniform writeonly image2D postProcessOutput;

float linear_rgb_to_srgb(float color) // took it from blender's source code
{
	if(color < 0.0031308)
	{
		return (color < 0.0) ? 0.0 : color * 12.92;
	}

	return 1.055 * pow(color, 1.0 / 2.4) - 0.055;
}

vec3 reinhard(vec3 color)
{
	return color / (color + vec3(1.0));
}

vec3 uncharted(vec3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;

	vec3 uncharted = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
	float whiteScale = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
	return uncharted / whiteScale;
}

vec3 aces(vec3 color)
{
	return color * (2.51 * color + 0.03) / (color * (2.43 * color + 0.59) + 0.14);
}

vec3 PBRNeutralToneMapping( vec3 color ) {
  const float startCompression = 0.8 - 0.04;
  const float desaturation = 0.15;

  float x = min(color.r, min(color.g, color.b));
  float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
  color -= offset;

  float peak = max(color.r, max(color.g, color.b));
  if (peak < startCompression) return color;

  const float d = 1. - startCompression;
  float newPeak = 1. - d * d / (peak + d - startCompression);
  color *= newPeak / peak;

  float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
  return mix(color, newPeak * vec3(1, 1, 1), g);
}

vec3 adjustContrast(vec3 color, float contrast, float brightness, float exposure) 
{

    color *= exposure;
    
    color += brightness;
    
    color = (color - 0.5) * contrast + 0.5;
	return color;
}
  


void main()
{
	ivec2 st = ivec2(gl_GlobalInvocationID.xy);
	vec3 color = imageLoad(currentFrame, st).rgb;
	
	color = aces(color); // reinhard, uncharted, or aces
	// color = adjustContrast(color, 1.0, 0.01, 1.0); // Adjust contrast, brightness, and exposure as needed
	color = vec3(linear_rgb_to_srgb(color.r), linear_rgb_to_srgb(color.g), linear_rgb_to_srgb(color.b));


	imageStore(postProcessOutput, st, vec4(color, 1.0));
}