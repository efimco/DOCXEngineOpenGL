#version 460 core

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D currentFrame;
layout(binding = 1) uniform sampler2D historyFrame;
layout(rgba16f, binding = 2) uniform writeonly image2D outputFrame;
layout(binding = 3) uniform sampler2D velocityTexture;
layout(binding = 4) uniform sampler2D prevVelocityTexture;
layout(binding = 5) uniform sampler2D depthTexture;
layout(binding = 6) uniform sampler2D prevDepthTexture;

uniform int isTAA;
uniform int frameNumber;
uniform int accumulationLimit; 
uniform vec4 resolution; // x: width, y: height, z: 1/width, w: 1/height
uniform vec2 cameraJitter;
uniform vec2 prevCameraJitter;
uniform float nearPlane;
uniform float farPlane;



vec3 rgb2ycocg(vec3 rgb) {
	float Y = dot(rgb, vec3(0.25, 0.5, 0.25));
	float Co = dot(rgb, vec3(0.5, 0.0, -0.5));
	float Cg = dot(rgb, vec3(-0.25, 0.5, -0.25));
	return vec3(Y, Co, Cg);
}

vec3 ycocg2rgb(vec3 ycocg) {
	float Y = ycocg.x;
	float Co = ycocg.y;
	float Cg = ycocg.z;
	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;
	return vec3(R, G, B);
}



void main()
{
	ivec2 st = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (vec2(st) + vec2(0.5)) / resolution.xy; // cuz we need to sample at the center of the pixel
	vec3 currentColorSample = texture(currentFrame, uv).rgb;
	
	if (isTAA == 0)
	{
		imageStore(outputFrame, st, vec4(currentColorSample, 1.0));
		return;
	}

	vec2 velocity = texture(velocityTexture, uv).rg;
	float velocityMagnitude = length(velocity);


	vec2 reprojectedUV = uv;
	vec3 historyColorSample = texture(historyFrame, reprojectedUV).rgb;
		
	if (velocityMagnitude > 0.005) // Large motion, potentially a camera cut
	{
		imageStore(outputFrame, st, vec4(currentColorSample, 1.0));
		return;	
	}


	vec3 minColor = vec3(9999.0), maxColor = vec3(-9999.0);
	vec3 currentYCoCg = rgb2ycocg(currentColorSample);


	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{	
			vec2 neighborUV = uv + vec2(x, y) * resolution.zw; 
			vec3 color = texture(currentFrame, neighborUV).rgb;
			vec3 colorYCoCg = rgb2ycocg(color);
			minColor = min(minColor, colorYCoCg); 
			maxColor = max(maxColor, colorYCoCg);
		}
	}

	vec3 historyYCoCg = rgb2ycocg(historyColorSample);
	historyYCoCg = clamp(historyYCoCg, minColor, maxColor);
	historyColorSample = ycocg2rgb(historyYCoCg);

	
	if (frameNumber > accumulationLimit)
	{
		imageStore(outputFrame, st, vec4(historyColorSample, 1.0));
		return;
	}
	vec3 outputColor = mix(historyColorSample, currentColorSample, .1); 
	imageStore(outputFrame, st, vec4(outputColor, 1.0));


}
