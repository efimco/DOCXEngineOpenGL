#version 460 core

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform readonly image2D currentFrame;
layout(rgba16f, binding = 1) uniform image2D historyFrame;
layout(rg16f, binding = 2) uniform readonly image2D velocityTexture;
layout(r32f, binding = 3) uniform readonly image2D depthTexture;

uniform int frameNumber = 0;


// Store weight in w component
vec4 AdjustHDRColor(vec3 color)
{
	float luminance = dot(color, vec3(0.299, 0.587, 0.114));
	float luminanceWeight = 1.0 / (1.0 + luminance);
	return vec4(color, 1.0) * luminanceWeight;
}



void main()
{
	#define TAA_ON	
	#ifdef TAA_ON 
		vec2 velocityUV = imageLoad(velocityTexture, ivec2(gl_GlobalInvocationID.xy)).xy;
		vec2 reprojectedUV = (vec2(gl_GlobalInvocationID.xy) + 0.5) / vec2(imageSize(currentFrame)) + velocityUV;
		reprojectedUV = clamp(reprojectedUV, vec2(0.0), vec2(1.0));

		ivec2 reprojectedCoord = ivec2(reprojectedUV * vec2(imageSize(historyFrame)));

		
		vec4 currentColor = imageLoad(currentFrame, ivec2(gl_GlobalInvocationID.xy));
		currentColor = AdjustHDRColor(currentColor.rgb);

		vec4 minColor = vec4(1000.0), maxColor = vec4(-1000.0);
		
		// Sample a 3x3 neighborhood to create a box in color space (antiflicker: add small bias to min/max)
		for(int x = -1; x <= 1; ++x)
		{
			for(int y = -1; y <= 1; ++y)
			{
				ivec2 neighborCoord = ivec2(gl_GlobalInvocationID.xy) + ivec2(x, y);
				neighborCoord = clamp(neighborCoord, ivec2(0), imageSize(currentFrame) - ivec2(1));
				vec4 color = imageLoad(currentFrame, neighborCoord);
				color = AdjustHDRColor(color.rgb);
				minColor = min(minColor, color); 
				maxColor = max(maxColor, color);
			}
		}
	
		// Clamp previous color to min/max bounding box
		vec4 previousColor = imageLoad(historyFrame, ivec2(gl_GlobalInvocationID.xy));
		previousColor = AdjustHDRColor(previousColor.rgb);
		vec4 previousColorClamped = clamp(previousColor, minColor, maxColor);

		float currentWeight = 0.1 * currentColor.a;
		float previousWeight = 0.9 * previousColor.a;

		// Normalize the blend to avoid darkening/brightening
		vec3 result = (currentColor.rgb * currentWeight + previousColorClamped.rgb * previousWeight) / max(currentWeight + previousWeight, 1e-5);
	#else
		vec3 result = imageLoad(currentFrame, ivec2(gl_GlobalInvocationID.xy)).rgb;
	#endif
	imageStore(historyFrame, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1.0));
}
